#Collection In java
In Java, a collection refers to an object that represents a group of individual objects, treated as a single unit. 
The Java Collections Framework provides a unified architecture for representing and manipulating these collections. 
This framework includes interfaces that define various types of collections and classes that implement these interfaces. 

#Key interfaces within the Java Collections Framework:

##Collection:
This is the root interface of the collection hierarchy, defining common operations like add(), remove(), size(), and iterator(). While Java doesn't provide direct implementations of Collection, it offers implementations for its subinterfaces.

##List:
Represents an ordered collection that allows duplicate elements. Examples include ArrayList, LinkedList, and Vector.

##Set:
Represents a collection that does not allow duplicate elements, modeling the mathematical set abstraction. Examples include HashSet, LinkedHashSet, and TreeSet.

##Queue:
Represents a collection used to hold elements prior to processing, typically ordering them in a FIFO (First-In-First-Out) manner. Examples include LinkedList (which also implements List), PriorityQueue, and ArrayDeque.

##Map:
While not directly extending the Collection interface, Map is an integral part of the Collections Framework. It stores key-value pairs, where each key is unique and maps to at most one value. Examples include HashMap, LinkedHashMap, and TreeMap.


#Purpose of the Java Collections Framework:
The framework aims to provide a standardized and efficient way to manage groups of objects, offering reusable data structures and algorithms for common operations like adding, 
removing,
searching,
sorting, and
iterating over elements. 

This abstraction allows developers to manipulate collections independently of their underlying implementation details.














